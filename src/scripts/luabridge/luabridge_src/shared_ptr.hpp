/*
 * shared_ptr.hpp - Copyright (C) 2007 by Nathan Reed
 * Smart pointer with reference counting.
 * This is compatible with boost::shared_ptr, in the sense that it implements
 * a strict subset of boost_shared_ptr's functionality.
 */

#ifndef SHARED_PTR_HPP
#define SHARED_PTR_HPP

// Disable "unreachable code" warning generated by hash_map in release build
#include "StdAfx.h"
//#include "lua_instance.h"
namespace luabridge
{
    template <typename T>
    class cshared_ptr
    {
        T * ptr;
    public:
        cshared_ptr (T* ptr_);

        // Copy constructors: the first one is necessary to write out,
        // since the compiler doesn't recognize the second as a copy ctor
        cshared_ptr (const cshared_ptr<T>& rhs);
        template <typename U> cshared_ptr (const cshared_ptr<U>& rhs);

        template <typename U> cshared_ptr& operator =
            (const cshared_ptr<U> & rhs);

        T* get();
        void set(T *);

        T* operator * ();
        T* operator->();
        long use_count () const;
        
        void reset ();
        ~cshared_ptr ();
    };

    // Include implementation
#    include "impl/shared_ptr.hpp"
}

#endif
